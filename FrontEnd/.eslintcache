[{"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\index.tsx":"1","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\AppLayoutContainer.tsx":"2","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Constants.ts":"3","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\useEffectWithSkipDidMount.js":"4","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Register.tsx":"5","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Login.tsx":"6","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\News\\NewsList.tsx":"7","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Events\\EventsPosts.jsx":"8","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\EditProfile.tsx":"9","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Requests.ts":"10","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\components\\MainProfile.tsx":"11","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\News\\DetailNewModal.tsx":"12","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\AllUsers.tsx":"13","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\MainProfileContainer.tsx":"14","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\User.tsx":"15","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Events\\DetailEventsModal.tsx":"16","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\ProfileContainer.tsx":"17","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\App.tsx":"18","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Navigation.tsx":"19","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Footer\\Footer.tsx":"20","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\index.tsx":"21","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Register.tsx":"22","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Header\\Header.tsx":"23","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Requests.ts":"24","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\AddNewOrEvent.tsx":"25","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\AllUsers.tsx":"26","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\components\\MainProfile.tsx":"27","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\useEffectWithSkipDidMount.js":"28","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Events\\DetailEventsModal.tsx":"29","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\EditProfile.tsx":"30","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\New.tsx":"31","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\NewsList.tsx":"32","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\DetailNewModal.tsx":"33","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Constants.ts":"34"},{"size":711,"mtime":1616445058018,"results":"35","hashOfConfig":"36"},{"size":544,"mtime":1623256525137,"results":"37","hashOfConfig":"36"},{"size":3035,"mtime":1624214339380,"results":"38","hashOfConfig":"36"},{"size":827,"mtime":1620756309569,"results":"39","hashOfConfig":"36"},{"size":4017,"mtime":1624198140935,"results":"40","hashOfConfig":"36"},{"size":3464,"mtime":1624214671590,"results":"41","hashOfConfig":"36"},{"size":4524,"mtime":1624207363818,"results":"42","hashOfConfig":"36"},{"size":6320,"mtime":1624214845454,"results":"43","hashOfConfig":"36"},{"size":8632,"mtime":1624214433087,"results":"44","hashOfConfig":"36"},{"size":2454,"mtime":1624215369429,"results":"45","hashOfConfig":"36"},{"size":3953,"mtime":1624215284661,"results":"46","hashOfConfig":"36"},{"size":2346,"mtime":1624206602148,"results":"47","hashOfConfig":"36"},{"size":2876,"mtime":1624212605826,"results":"48","hashOfConfig":"36"},{"size":1498,"mtime":1624212842819,"results":"49","hashOfConfig":"36"},{"size":863,"mtime":1624214201371,"results":"50","hashOfConfig":"36"},{"size":1234,"mtime":1624212320342,"results":"51","hashOfConfig":"36"},{"size":1359,"mtime":1624214293667,"results":"52","hashOfConfig":"36"},{"size":757,"mtime":1624214272587,"results":"53","hashOfConfig":"36"},{"size":1467,"mtime":1624214848172,"results":"54","hashOfConfig":"36"},{"size":1724,"mtime":1624214744716,"results":"55","hashOfConfig":"36"},{"size":711,"mtime":1616445058018,"results":"56","hashOfConfig":"57"},{"size":4017,"mtime":1624198140935,"results":"58","hashOfConfig":"57"},{"size":1552,"mtime":1623256525144,"results":"59","hashOfConfig":"57"},{"size":2975,"mtime":1624295908845,"results":"60","hashOfConfig":"57"},{"size":4763,"mtime":1624296127979,"results":"61","hashOfConfig":"57"},{"size":3078,"mtime":1624288532370,"results":"62","hashOfConfig":"57"},{"size":4093,"mtime":1624291013293,"results":"63","hashOfConfig":"57"},{"size":827,"mtime":1620756309569,"results":"64","hashOfConfig":"57"},{"size":1328,"mtime":1624288377949,"results":"65","hashOfConfig":"57"},{"size":9633,"mtime":1624292035499,"results":"66","hashOfConfig":"57"},{"size":4547,"mtime":1624297669182,"results":"67","hashOfConfig":"57"},{"size":4614,"mtime":1624295874198,"results":"68","hashOfConfig":"57"},{"size":2353,"mtime":1624293840161,"results":"69","hashOfConfig":"57"},{"size":3035,"mtime":1624295164078,"results":"70","hashOfConfig":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yjy1no",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"n836c7",{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\index.tsx",["151"],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\AppLayoutContainer.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Constants.ts",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\useEffectWithSkipDidMount.js",["152","153","154"],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Register.tsx",["155"],"import React, {useCallback, useState} from 'react';\r\nimport {Button, Col, Container, Form} from \"react-bootstrap\";\r\n\r\nconst Register = () => {\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n\r\n    // const register = useCallback(async () => {\r\n    //     const result = await fetch(`http://backend/BackEnd/personal/registration.php`, {\r\n    //         method: 'POST',\r\n    //         body: JSON.stringify({\r\n    //             LOGIN: login,\r\n    //             PASSWORD: password,\r\n    //         })\r\n    //       });\r\n    //     return result.json()\r\n    // }, [login, password]);\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        const formData = new FormData(form);\r\n        const result = await fetch(`http://backend/BackEnd/personal/registration.php`, {\r\n            method: 'post',\r\n            body: formData\r\n          });\r\n        return result.json()\r\n    }\r\n\r\n\r\n    return (\r\n        <Container fluid style={{padding:'0px'}}>\r\n            <Form onSubmit={onSubmit}  className={'main__register-form'}>\r\n                <div style={{textAlign: 'center', fontSize: '25px', fontWeight: 400, marginBottom: 10}}>РЕГИСТРАЦИЯ</div>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                    <Form.Group className={'input-text'} controlId=\"formBasicEmail\">\r\n                        <Form.Control name='NAME' placeholder=\"Введите имя\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                    <Form.Group className={'input-text'} controlId=\"formBasicEmail\">\r\n                        <Form.Control name='LAST_NAME' placeholder=\"Введите фаиилию\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                    <Form.Group className={'input-text'} controlId=\"formBasicEmail\">\r\n                        <Form.Control name='GROUP_NUMBER' placeholder=\"Введите номер группы\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                    <Form.Group className={'input-text'} controlId=\"formBasicEmail\">\r\n                        <Form.Control name='LOGIN' type=\"email\" value={login} onChange={(e) => setLogin(e.target.value) } placeholder=\"Введите email\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                    <Form.Group className={'input-text'} controlId=\"formBasicPassword\">\r\n                        <Form.Control name='PASSWORD' type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Введите пароль\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={6} xl={2} style={{margin: 'auto'}}>\r\n                <Form.Group>\r\n                    <Form.File\r\n                        type=\"file\"\r\n                        name={'PREVIEW_PICTURE'}\r\n                        id={'inputGroupFile01'}\r\n                        label={'Аватар'}\r\n                        data-browse=\"Выбрать файл\"\r\n                        custom\r\n                    />\r\n                </Form.Group>\r\n\r\n                </Col>\r\n               \r\n                <Col md={3} xs ={8} style={{display:'flex',margin:'auto',justifyContent: 'center'}}>\r\n                    <Button style={{width:'100%', marginTop: '15px'}}\r\n                    \r\n                            type='submit'\r\n                            variant=\"success\"\r\n                            className={'submit-btn'}>\r\n                        Зарегистрироваться\r\n                    </Button>\r\n                </Col>\r\n            </Form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Login.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\News\\NewsList.tsx",["156","157"],"import React, {useCallback, useState} from 'react';\r\nimport New from \"./New\";\r\nimport {Col, Container, Form} from \"react-bootstrap\";\r\nimport { useAsync } from \"@umijs/hooks\";\r\nimport {addNewInitialModel, UserTypes} from \"../Constants\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCookieByName} from \"../Auth/Login\";\r\nimport {SelectButton} from \"../Events/EventsPosts\";\r\nimport {ClockLoader} from \"react-spinners\";\r\nimport AddNewOrEvent from \"../AddNewOrEvent\";\r\nimport {addNew, getNews} from \"../Requests\";\r\n\r\nexport interface NewI {\r\n    ID: string\r\n    NAME: string\r\n    PREVIEW_PICTURE: string\r\n    PREVIEW_TEXT: string\r\n    userId: string\r\n    token?: string\r\n    LAST_NAME?: string\r\n    LAST_AUTH?: boolean\r\n}\r\n\r\nexport interface NewsListI {\r\n    count_news_all: string\r\n    this_page: number\r\n    values: Array<NewI>\r\n}\r\n\r\n\r\nconst NewsList = () => {\r\n    const { userId } : UserTypes = useParams();\r\n    const token = getCookieByName('access_token');\r\n    const isAdmin = getCookieByName('is_admin') === \"1\";\r\n\r\n    const { data, loading, run } = useAsync<NewsListI>(() => getNews(userId, token) , []);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [fields, setFields] = useState(addNewInitialModel);\r\n\r\n    const onFieldsChange = useCallback((value, name) => {\r\n        setFields(fields.map(el => el.name === name ? {...el, value: value} : {...el}))\r\n    },[fields]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setShowModal(false)\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(async (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        const formData = new FormData(form);\r\n        await addNew(formData);\r\n        await run();\r\n        setShowModal(false)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor: '#ebedf0', height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n            <Container style={{display: 'flex', padding: 0, justifyContent: 'center', paddingBottom: 80}}>\r\n                <Col xl={12} xs={12}>\r\n                    {\r\n                        isAdmin && <SelectButton style={{ margin: '12px auto',width: 250, color: '#fff' }} onClick={() => {\r\n                            setShowModal(true)\r\n                        }}>\r\n                            Добавить новость\r\n                        </SelectButton>\r\n                    }\r\n                    {\r\n                        data?.values?.length === 0 && <div style={{height: 350, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <div style={{display: 'flex', justifyContent: 'center', fontSize: 20, color: '#000', background: '#fff', width: '100%', height: 120, borderRadius: 10, alignItems: 'center' }}>\r\n                                Новостей нет\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        loading && <div style={{height: 350, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <ClockLoader color={'#283593'} loading={loading} />\r\n                        </div>\r\n                    }\r\n                    {\r\n                    !loading && data?.values?.map((el) => <New\r\n                                                              NAME={el.NAME}\r\n                                                              ID={el.ID}\r\n                                                              userId={userId}\r\n                                                              token={token}\r\n                                                              PREVIEW_PICTURE={el.PREVIEW_PICTURE}\r\n                                                              PREVIEW_TEXT={el.PREVIEW_TEXT}/> )\r\n                    }\r\n                </Col>\r\n            </Container>\r\n            {\r\n                showModal && <AddNewOrEvent onSubmit={onSubmit}\r\n                                            onFieldsChange={onFieldsChange}\r\n                                            fields={fields}\r\n                                            token={token}\r\n                                            header={'Добавление новости'}\r\n                                            userId={userId}\r\n                                            show={showModal}\r\n                                            handleClose={handleClose}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewsList;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Events\\EventsPosts.jsx",["158","159","160","161"],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\EditProfile.tsx",["162","163","164","165"],"import { useAsync } from '@umijs/hooks';\r\nimport React, {useState} from 'react';\r\nimport { useEffect } from 'react';\r\nimport {Button, Col, Container, Form} from \"react-bootstrap\";\r\nimport { getCookieByName } from '../Auth/Login';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { UserTypes } from '../Constants';\r\nimport { editProfile, getUserFields } from '../Requests';\r\n\r\nconst EditProfile = () => {\r\n    const [profileFields, setProfileFields] = useState({\r\n        name: '',\r\n        lastName: '',\r\n        middleName: '',\r\n        numberOfGroup: '',\r\n        creditBookNumber: '',\r\n        phoneNumber: '',\r\n        email: '',\r\n        avatar: ''\r\n    });\r\n    const userId = getCookieByName('user_id');\r\n    const token = getCookieByName('access_token');\r\n    const { otherUserId } : UserTypes = useParams();\r\n\r\n    const { data, loading, run } = useAsync<any>(() => getUserFields(userId, otherUserId) , []);\r\n    useEffect(() => {\r\n        if(data) {\r\n            setProfileFields({\r\n                ...profileFields,\r\n                name: data?.NAME || '',\r\n                lastName: data.LAST_NAME || '',\r\n                middleName: data?.MIDDLE_NAME || '',\r\n                numberOfGroup: data?.GROUP_NUMBER || '',\r\n                creditBookNumber: data?.CREDIT_BOOK_NUMBER,\r\n                email: data?.EMAIL,\r\n                phoneNumber: data?.PHONE_NUMBER,\r\n                avatar: data?.PREVIEW_PICTURE?.replace('W:/domains/', 'http://')\r\n            })\r\n        }\r\n    }, [data])\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        const formData = new FormData(form);\r\n        const result = editProfile(formData)\r\n        alert('Успешно')\r\n    }\r\n\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', paddingBottom: 100}}>\r\n            <div style={{height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n                <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column'}}>\r\n                    <Form onSubmit={onSubmit} className={'main__register-form'} style={{marginTop: 15}}>\r\n                        <Col md={6} xl={8} style={{margin: '20px auto',}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicEmail\">\r\n                                <Form.Label>Имя</Form.Label>\r\n                                <Form.Control name='NAME' value={profileFields.name} onChange={(e) => {\r\n                                    setProfileFields({...profileFields, name: e.target.value})\r\n                                }} placeholder=\"Введите Имя\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: '10px auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                                <Form.Label>Фамилия</Form.Label>\r\n                                <Form.Control name='LAST_NAME' value={profileFields.lastName}\r\n                                              onChange={(e) => setProfileFields({...profileFields, lastName: e.target.value})}\r\n                                              placeholder=\"Введите фамилию\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Отчество</Form.Label>\r\n                                <Form.Control name='MIDDLE_NAME' value={profileFields.middleName}\r\n                                              onChange={(e) => setProfileFields({...profileFields, middleName: e.target.value})}\r\n                                              placeholder=\"Введите отчество\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Номер зачётеной книжки</Form.Label>\r\n                                <Form.Control type={'number'} name='CREDIT_BOOK_NUMBER' value={profileFields.creditBookNumber}\r\n                                              onChange={(e) => setProfileFields({...profileFields, creditBookNumber: e.target.value})}\r\n                                              placeholder=\"Введите номер зачетной книжки\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                                <Form.Label>Номер группы</Form.Label>\r\n                                <Form.Control type={'number'} name='GROUP_NUMBER' value={profileFields.numberOfGroup}\r\n                                              onChange={(e) => setProfileFields({...profileFields, numberOfGroup: e.target.value})}\r\n                                              placeholder=\"Введите номер группы\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Номер телефона</Form.Label>\r\n                                <Form.Control name='PHONE_NUMBER' value={profileFields.phoneNumber}\r\n                                              onChange={(e) => setProfileFields({...profileFields, phoneNumber: e.target.value})}\r\n                                              placeholder=\"Введите номер телефона\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}}  controlId=\"formBasicPassword\">\r\n                            <Form.Label>Email</Form.Label>\r\n                                <Form.Control name='EMAIL' value={profileFields.email}\r\n                                              onChange={(e) => setProfileFields({...profileFields, email: e.target.value})}\r\n                                              placeholder=\"Введите email\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                        <Form.File\r\n                            style={{height: '100%'}}\r\n                            type=\"file\"\r\n                            label={'Аватар'}\r\n                            name={'PREVIEW_PICTURE'}\r\n                            id={'inputGroupFile01'}\r\n                            data-browse=\"Выбрать файл\"\r\n                            onChange={(e) => {\r\n                                alert('Аватар загружен')\r\n                            }}\r\n                            custom\r\n                        />\r\n                        </Col>\r\n                        \r\n                        <Form.Group className={'input-text'} style={{margin: 0}} controlId=\"title\">\r\n                            <Form.Control name='TOKEN' value={token} type='hidden' />\r\n                            <Form.Control name='USER_ID' value={userId} type='hidden' />\r\n                        </Form.Group>\r\n                        <Col md={6} xs ={8} style={{display:'flex',margin:'auto',justifyContent: 'center'}}>\r\n                            <Button variant=\"success\" onClick={() => {\r\n                                console.log('lol')\r\n                            }} type='submit' className={'submit-btn'}>\r\n                                Сохранить\r\n                            </Button>\r\n                        </Col>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Requests.ts",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\components\\MainProfile.tsx",["166","167","168"],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\News\\DetailNewModal.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\AllUsers.tsx",["169","170","171","172","173"],"import React, { useState } from 'react';\r\nimport {Col, Container, Modal} from \"react-bootstrap\";\r\nimport {UserTypes} from \"./Constants\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCookieByName} from \"./Auth/Login\";\r\nimport {useAsync} from \"@umijs/hooks\";\r\nimport {getAllUsers} from \"./Requests\";\r\nimport {NewsListI} from \"./News/NewsList\";\r\nimport moment from 'moment'\r\nimport ModalContainer from './ModalContainer';\r\nimport User from './User';\r\nimport { useMemo } from 'react';\r\n\r\nconst AllUsers = () => {\r\n    const { userId } : UserTypes = useParams();\r\n    const token = getCookieByName('access_token');\r\n    const [userInfo, setUserInfo] = useState<any>(0)\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false)\r\n\r\n    const { data, loading, run } = useAsync<NewsListI>(() => getAllUsers(userId, token) , []);\r\n    const userModal = useMemo(() => show && <User otherUserID={userInfo} show={show} handleClose={handleClose} />, [show] )\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', padding: 0}}>\r\n            <div style={{height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n                <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column'}}>\r\n                    <Col xs={12} style={{textAlign: 'center', height: 100, padding: 15}}>Список Пользователей</Col>\r\n                    {\r\n                        data?.values?.map(el =>  <div>\r\n                            <Col xs={12} onClick={() => {\r\n                    \r\n                                setUserInfo(el?.ID)\r\n                                setShow(true)\r\n                            }} style={{\r\n                                cursor: 'pointer',\r\n                                border: '1px solid #dce1e6',\r\n                                display: 'flex',\r\n                                background: '#fff',\r\n                                marginBottom: 3\r\n                            }}>\r\n                                <div style={{padding:`11px 14px 8px 0px`}}>\r\n                                    <img style={{width: 76, height: 'auto'}} src={el?.PREVIEW_PICTURE.replace('W:/domains/', 'http://')} alt=\"\"/>\r\n                                </div>\r\n                                <div>\r\n                                    <div style={{marginTop: 10, marginBottom: 3}}>{el?.LAST_NAME} {el?.NAME}</div>\r\n                                    <div style={{marginTop: 10, marginBottom: 3}}>был в сети {moment.unix(Number(el?.LAST_AUTH)).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                </div>\r\n                            </Col>\r\n                            {userModal}\r\n                        </div> )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AllUsers;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\MainProfileContainer.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\User.tsx",["174","175","176"],"import React from 'react';\r\nimport {Modal} from \"react-bootstrap\";\r\nimport {UserTypes} from \"./Constants\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCookieByName} from \"./Auth/Login\";\r\nimport ModalContainer from './ModalContainer';\r\nimport MainProfile from './Profile/features/components/MainProfile';\r\nimport EditProfile from './Profile/EditProfile';\r\n\r\nconst User = ({show, handleClose, otherUserID}) => {\r\n    const { userId } : UserTypes = useParams();\r\n    const token = getCookieByName('access_token');\r\n    \r\n    return (\r\n        <ModalContainer header={'Пользователь'} show={show} handleClose={handleClose}>\r\n            <Modal.Body style={{background: 'rgb(235, 237, 240)'}}>\r\n                <MainProfile otherUserID={otherUserID} />\r\n            </Modal.Body>\r\n        </ModalContainer>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Events\\DetailEventsModal.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\ProfileContainer.tsx",["177","178","179","180"],"import React, {useEffect, useMemo} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {menuTabs, TabsTypes, UserTypes} from \"../Constants\";\r\nimport Header from \"../Header/Header\";\r\nimport MainProfileContainer from \"./features/MainProfileContainer\";\r\nimport {useAsync} from \"@umijs/hooks\";\r\nimport {getCookieByName} from \"../Auth/Login\";\r\n\r\nconst ProfileContainer = () => {\r\n\r\n    const { userId } : UserTypes = useParams();\r\n    const { currentTab }: TabsTypes = useParams();\r\n\r\n\r\n\r\n    const getHeaderNameByCurrentTab = useMemo(() => {\r\n        switch (Number(currentTab)) {\r\n            case menuTabs.ALL_USERS:\r\n                return 'Все пользователи';\r\n            case menuTabs.NEWS:\r\n                return 'Новости';\r\n            case menuTabs.EVENTS:\r\n                return 'Все мероприятия';\r\n            case menuTabs.PROFILE:\r\n                return `@${userId}`;\r\n            case menuTabs.EDIT:\r\n                return 'Редактирование профиля'\r\n            default:\r\n                return 'Новости'\r\n        }\r\n    }, [currentTab]);\r\n\r\n    return (\r\n        <div>\r\n            <Header title={getHeaderNameByCurrentTab} isAuth/>\r\n            <MainProfileContainer currentTab={Number(currentTab)}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileContainer;\r\n","C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\App.tsx",[],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Navigation.tsx",["181","182"],"C:\\Users\\в\\Desktop\\openserver\\domains\\diplom\\FrontEnd\\src\\main\\Footer\\Footer.tsx",["183","184"],"import React from 'react';\r\nimport {Button, Col, Container} from \"react-bootstrap\";\r\nimport homeIcon from '../../images/home.png'\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {UserTypes} from \"../Constants\";\r\nimport { userInfo } from 'os';\r\n\r\ntype FooterT = {\r\n    isMobile?: boolean\r\n}\r\n\r\nconst Footer = ({isMobile}: FooterT): React.ReactElement => {\r\n    const { userId } : UserTypes = useParams();\r\n    if (!isMobile) {\r\n        return <div></div>\r\n    }\r\n    return (\r\n        <Container style={{ position: 'fixed', bottom: 0, left: 0, boxShadow: '0 0 10px rgba(0,0,0,0.5)',background: '#fff', zIndex: 2 }}>\r\n           <div className=\"footer\" >\r\n               <div style={{ width: '100%', display: 'flex', justifyContent: 'space-around' }}>\r\n                   <Link to={`/profile/${userId}/1/${userId}`}>\r\n                       <Col className='footer__item' xs={4} md={6} xl={2} style={{textAlign: 'center'}}>\r\n                           <img src={homeIcon} alt=\"\"/>\r\n                       </Col>\r\n                   </Link>\r\n                   <Link to={`/profile/${userId}/2/${userId}`}>\r\n                       <Col className='footer__item' xs={4} md={6} xl={2} style={{textAlign: 'center'}}>\r\n                           <img src={homeIcon} alt=\"\"/>\r\n                       </Col>\r\n                   </Link>\r\n                   <Link to={`/profile/${userId}/3/${userId}`}>\r\n                       <Col className='footer__item' xs={4} md={6} xl={2} style={{textAlign: 'center'}}>\r\n                           <img src={homeIcon} alt=\"\"/>\r\n                       </Col>\r\n                   </Link>\r\n               </div>\r\n           </div>\r\n       </Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\index.tsx",["185"],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Auth\\Register.tsx",["186"],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Header\\Header.tsx",["187"],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Requests.ts",[],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\AddNewOrEvent.tsx",["188","189"],"import React, {useCallback, useMemo} from 'react';\r\nimport {Button, Col, Form, Modal} from \"react-bootstrap\";\r\nimport ModalContainer from \"./ModalContainer\";\r\nimport moment from \"moment\";\r\n\r\nconst AddNewOrEvent = ({onFieldsChange, userId,fields, header, show, handleClose, token, onSubmit, newsId } : any) => {\r\n\r\n    return (\r\n            <ModalContainer header={header} show={show} handleClose={handleClose}>\r\n                <Form id={'form'} onSubmit={onSubmit} >\r\n                    <Modal.Body style={{background: 'rgb(235, 237, 240)'}}>\r\n                        {\r\n                            fields.map(el => (\r\n                                <Col md={12} xl={12} style={{margin: 'auto', background: '#fff', padding: 9, marginBottom: 5, borderRadius: 5}}>\r\n                                    <div style={{textAlign: 'left', fontWeight: 400, marginBottom: 10}}>{el.title}</div>\r\n                                    {\r\n                                        el.type === 'input' || el.type === 'textarea' ? <Form.Group className={'input-text'} style={{margin: 0, height: 'auto'}} controlId=\"title\">\r\n                                            <Form.Control name={el.name}\r\n                                                          as={el.type}\r\n                                                          type={el.type}\r\n                                                          value={el.value}\r\n                                                          onChange={(e) => {\r\n                                                              onFieldsChange(e.target.value, el.name)\r\n                                                          }}\r\n                                                          placeholder=\"Введите название новости\"\r\n                                            />\r\n                                        </Form.Group> : el.type === 'date' ?  <Form.Group className={'input-text'} style={{margin: 0}} controlId=\"title\">\r\n                                                <Form.Control onChange={(e) => {\r\n                                                                    onFieldsChange(e.target.value, el.name)\r\n                                                                }}\r\n                                                              name={el.name}\r\n                                                              value={moment(el.value).format(\"YYYY-MM-DD\")}\r\n                                                              type='date' />\r\n                                        </Form.Group>:   <Form.Group>\r\n                                            <Form.File\r\n                                                type=\"file\"\r\n                                                name={el.name}\r\n                                                id={'inputGroupFile01'}\r\n                                                label={el.value}\r\n                                                multiple={el.multiple}\r\n                                                data-browse=\"Выбрать файл\"\r\n                                                onChange={(e) => {\r\n                                                    // @ts-ignore\r\n                                                    const value = el.multiple ? Object.values(e.target.files).map(el => el.name).join(', ') : e.target.files[0].name;\r\n                                                    onFieldsChange(value, el.name)\r\n                                                }}\r\n                                                custom\r\n                                            />\r\n                                        </Form.Group>\r\n                                    }\r\n                                </Col>\r\n\r\n                            ) )\r\n                        }\r\n                    </Modal.Body>\r\n                    <Form.Group className={'input-text'} style={{margin: 0}} controlId=\"title\">\r\n                        <Form.Control name='TOKEN' value={token} type='hidden' />\r\n                        <Form.Control name='USER_ID' value={userId} type='hidden' />\r\n                        { newsId &&<Form.Control name='NEWS_ID' value={newsId} type='hidden' /> }\r\n                    </Form.Group>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={() => {\r\n                            handleClose();\r\n                        }}>\r\n                            Закрыть\r\n                        </Button>\r\n                        <Button variant=\"success\" type=\"submit\">\r\n                            Добавить\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </ModalContainer>\r\n    );\r\n};\r\n\r\nexport default AddNewOrEvent;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\AllUsers.tsx",["190","191","192","193"],"import React, { useState } from 'react';\r\nimport {Col, Container, Modal} from \"react-bootstrap\";\r\nimport {UserTypes} from \"./Constants\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCookieByName} from \"./Auth/Login\";\r\nimport {useAsync} from \"@umijs/hooks\";\r\nimport {getAllUsers, getAllUsersForEvents} from \"./Requests\";\r\nimport {NewsListI} from \"./News/NewsList\";\r\nimport moment from 'moment'\r\nimport User from './User';\r\nimport { useMemo } from 'react';\r\n\r\nconst AllUsers = ({forEvents = false, eventId} : {\r\n    forEvents?: boolean\r\n    eventId?: string\r\n}) => {\r\n    const { userId } : UserTypes = useParams();\r\n    const token = getCookieByName('access_token');\r\n    const [userInfo, setUserInfo] = useState<any>(0)\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false)\r\n\r\n    const { data, loading, run } = useAsync<NewsListI>(() => forEvents && eventId ? getAllUsersForEvents(userId, token, eventId) :  getAllUsers(userId, token) , []);\r\n    const userModal = useMemo(() => show && <User otherUserID={userInfo} show={show} handleClose={handleClose} />, [show] )\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', padding: 0}}>\r\n            <div style={{height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n                <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column'}}>\r\n                    {\r\n                        data?.values?.length && <Col xs={12} style={{textAlign: 'center', height: 100, padding: 15}}>Список Пользователей</Col>\r\n                    } \r\n                    {\r\n                        data?.values?.map(el =>  <div>\r\n                            <Col xs={12} onClick={() => {\r\n                    \r\n                                setUserInfo(el?.ID)\r\n                                setShow(true)\r\n                            }} style={{\r\n                                cursor: 'pointer',\r\n                                border: '1px solid #dce1e6',\r\n                                display: 'flex',\r\n                                background: '#fff',\r\n                                marginBottom: 3\r\n                            }}>\r\n                                <div style={{padding:`11px 14px 8px 0px`}}>\r\n                                    <img style={{width: 76, height: 'auto'}} src={el?.PREVIEW_PICTURE.replace('W:/domains/', 'http://')} alt=\"\"/>\r\n                                </div>\r\n                                <div>\r\n                                    <div style={{marginTop: 10, marginBottom: 3}}>{el?.LAST_NAME} {el?.NAME}</div>\r\n                                    <div style={{marginTop: 10, marginBottom: 3}}>был в сети {moment.unix(Number(el?.LAST_AUTH)).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                </div>\r\n                            </Col>\r\n                            {userModal}\r\n                        </div> )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AllUsers;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\features\\components\\MainProfile.tsx",["194","195","196","197"],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\useEffectWithSkipDidMount.js",["198","199","200"],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Events\\DetailEventsModal.tsx",[],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Profile\\EditProfile.tsx",["201","202","203","204","205","206"],"import { useAsync } from '@umijs/hooks';\r\nimport React, {useState} from 'react';\r\nimport { useEffect } from 'react';\r\nimport {Button, Col, Container, Form} from \"react-bootstrap\";\r\nimport { getCookieByName } from '../Auth/Login';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { UserTypes } from '../Constants';\r\nimport { editProfile, getUserFields } from '../Requests';\r\nimport { debug } from 'console';\r\n\r\nconst EditProfile = () => {\r\n    const [profileFields, setProfileFields] = useState({\r\n        name: '',\r\n        lastName: '',\r\n        middleName: '',\r\n        numberOfGroup: '',\r\n        creditBookNumber: '',\r\n        phoneNumber: '',\r\n        email: '',\r\n        avatar: '',\r\n        isAdmin: false\r\n    });\r\n    const userId = getCookieByName('user_id');\r\n    const isAdmin = getCookieByName('is_admin') === \"1\";\r\n    const token = getCookieByName('access_token');\r\n    const { otherUserId } : UserTypes = useParams();\r\n\r\n    const { data, loading, run } = useAsync<any>(() => getUserFields(userId, otherUserId) , []);\r\n    useEffect(() => {\r\n        if(data) {\r\n            setProfileFields({\r\n                ...profileFields,\r\n                name: data?.NAME || '',\r\n                lastName: data.LAST_NAME || '',\r\n                middleName: data?.MIDDLE_NAME || '',\r\n                numberOfGroup: data?.GROUP_NUMBER || '',\r\n                creditBookNumber: data?.CREDIT_BOOK_NUMBER,\r\n                email: data?.EMAIL,\r\n                phoneNumber: data?.PHONE_NUMBER,\r\n                avatar: data?.PREVIEW_PICTURE?.replace('W:/domains/', 'http://'),\r\n                isAdmin: data?.IS_ADMIN\r\n            })\r\n        }\r\n    }, [data])\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        const formData = new FormData(form);\r\n        const result = editProfile(formData, userId === otherUserId ? false : true)\r\n        alert('Успешно')\r\n    }\r\n\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', paddingBottom: 100}}>\r\n            <div style={{height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n                <div style={{display: 'flex', justifyContent: 'center', flexDirection: 'column'}}>\r\n                    <Form onSubmit={onSubmit} className={'main__register-form'} style={{marginTop: 15}}>\r\n                        <Col md={6} xl={8} style={{margin: '20px auto',}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicEmail\">\r\n                                <Form.Label>Имя</Form.Label>\r\n                                <Form.Control name='NAME' value={profileFields.name} onChange={(e) => {\r\n                                    setProfileFields({...profileFields, name: e.target.value})\r\n                                }} placeholder=\"Введите Имя\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: '10px auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                                <Form.Label>Фамилия</Form.Label>\r\n                                <Form.Control name='LAST_NAME' value={profileFields.lastName}\r\n                                              onChange={(e) => setProfileFields({...profileFields, lastName: e.target.value})}\r\n                                              placeholder=\"Введите фамилию\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Отчество</Form.Label>\r\n                                <Form.Control name='MIDDLE_NAME' value={profileFields.middleName}\r\n                                              onChange={(e) => setProfileFields({...profileFields, middleName: e.target.value})}\r\n                                              placeholder=\"Введите отчество\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Номер зачётеной книжки</Form.Label>\r\n                                <Form.Control type={'number'} name='CREDIT_BOOK_NUMBER' value={profileFields.creditBookNumber}\r\n                                              onChange={(e) => setProfileFields({...profileFields, creditBookNumber: e.target.value})}\r\n                                              placeholder=\"Введите номер зачетной книжки\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                                <Form.Label>Номер группы</Form.Label>\r\n                                <Form.Control type={'number'} name='GROUP_NUMBER' value={profileFields.numberOfGroup}\r\n                                              onChange={(e) => setProfileFields({...profileFields, numberOfGroup: e.target.value})}\r\n                                              placeholder=\"Введите номер группы\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}} controlId=\"formBasicPassword\">\r\n                            <Form.Label>Номер телефона</Form.Label>\r\n                                <Form.Control name='PHONE_NUMBER' value={profileFields.phoneNumber}\r\n                                              onChange={(e) => setProfileFields({...profileFields, phoneNumber: e.target.value})}\r\n                                              placeholder=\"Введите номер телефона\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                            <Form.Group className={'input-text'} style={{height: '100%'}}  controlId=\"formBasicPassword\">\r\n                            <Form.Label>Email</Form.Label>\r\n                                <Form.Control name='EMAIL' value={profileFields.email}\r\n                                              onChange={(e) => setProfileFields({...profileFields, email: e.target.value})}\r\n                                              placeholder=\"Введите email\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} xl={8} style={{margin: 'auto'}}>\r\n                        <Form.File\r\n                            style={{height: '100%'}}\r\n                            type=\"file\"\r\n                            label={'Аватар'}\r\n                            name={'PREVIEW_PICTURE'}\r\n                            id={'inputGroupFile01'}\r\n                            data-browse=\"Выбрать файл\"\r\n                            onChange={(e) => {\r\n                                alert('Аватар загружен')\r\n                            }}\r\n                            custom\r\n                        />\r\n                        </Col>\r\n                        {\r\n                            userId !== otherUserId && <Col md={6} xl={8} style={{margin: '20px auto'}}>\r\n                            <Form.Group className={'input-text'} style={{margin: 0}} controlId=\"title\">\r\n                                <Form.Check\r\n                                    type=\"checkbox\"\r\n                                    label={'Является администратором'}\r\n                                    name={'IS_ADMIN'}\r\n                                    checked={profileFields?.isAdmin}\r\n                                    onChange={() => setProfileFields({...profileFields, isAdmin: !profileFields.isAdmin})}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        }\r\n                        <Form.Group className={'input-text'} style={{margin: 0}} controlId=\"title\">\r\n                            <Form.Control name='TOKEN' value={token} type='hidden' />\r\n                            <Form.Control name='USER_ID' value={otherUserId} type='hidden' />\r\n                            {otherUserId && <Form.Control name='ADMIN_ID' value={userId} type='hidden' />}\r\n                        </Form.Group>\r\n                        <Col md={6} xs ={8} style={{display:'flex',margin:'auto',justifyContent: 'center'}}>\r\n                            <Button variant=\"success\" type='submit' className={'submit-btn'}>\r\n                                Сохранить\r\n                            </Button>\r\n                        </Col>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\New.tsx",["207"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport {NewI} from \"./NewsList\";\r\nimport {SelectButton} from \"../Events/EventsPosts\";\r\nimport DetailNewModal, { getNew } from \"./DetailNewModal\";\r\nimport AddNewOrEvent from '../AddNewOrEvent';\r\nimport { addNewInitialModel } from '../Constants';\r\nimport { useAsync } from '@umijs/hooks';\r\nimport { updateNews } from '../Requests';\r\n\r\n\r\n\r\nconst New = ({NAME, ID,userId, token, PREVIEW_TEXT, PREVIEW_PICTURE, run}: NewI) => {\r\n    const { data, loading } = useAsync<any>(() => getNew(userId, token, ID) , []);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n\r\n    const [fields, setFields] = useState(addNewInitialModel);\r\n    useEffect(() => {\r\n        if(data) {\r\n            setFields(addNewInitialModel.map(el => ({...el, value: (el.name !== 'ADD_PICTURES[]' && el.name !== 'PREVIEW_PICTURE') ? data[el?.name] : '' })))   \r\n        }\r\n    }, [data])\r\n    const handleCloseEditModal = () => {\r\n        setShowEditModal(false)\r\n    \r\n    };\r\n    const handleShowEditModal = () => setShowEditModal(true);\r\n    \r\n\r\n    const onFieldsChange = useCallback((value, name) => {\r\n        setFields(fields.map(el => el.name === name ? {...el, value: value} : {...el}))\r\n    },[fields]);\r\n\r\n    return (\r\n        <div style={{backgroundColor: \"#FFF\",width: '100%',marginTop: 20, borderRadius: 20, padding: '0px 10px 30px 10px'}}>\r\n            <div>\r\n            <div style={{display: 'flex', textAlign: \"left\", padding: 10, alignItems: 'center'}}>\r\n                    <SelectButton onClick={() => handleShowEditModal()} style={{ margin: '12px 12px 12px auto',width: 140, color: '#fff', height: 30, padding: 2 }}>\r\n                            Редактировать\r\n                    </SelectButton>\r\n                    <SelectButton onClick={() => handleShow()} style={{ margin: '12px 12px 12px',width: 140, color: '#fff', height: 30, padding: 2 }}>\r\n                        Посмотреть\r\n                    </SelectButton>\r\n                </div>\r\n            <div style={{\r\n                textAlign: 'center',\r\n                padding: 5,\r\n                wordBreak: 'break-all'\r\n            }}>{NAME}</div>\r\n              \r\n                <div style={{padding: 10}}>\r\n                    {PREVIEW_TEXT}\r\n                </div>\r\n            </div>\r\n            <div style={{display: \"flex\",justifyContent: 'center',width: \"100%\"}}>\r\n                <img\r\n                    className=\"d-block w-100\"\r\n                    src={PREVIEW_PICTURE.replace('W:/domains/', 'http://')} //todo src на картинки\r\n                    alt=\"First slide\"\r\n                />\r\n            </div>\r\n            {\r\n                show && <DetailNewModal text={PREVIEW_TEXT}\r\n                                        header={NAME}\r\n                                        id={ID}\r\n                                        userId={userId}\r\n                                        token={token}\r\n                                        previewPicture={PREVIEW_PICTURE.replace('W:/domains/', 'http://')}\r\n                                        show={show}\r\n                                        handleClose={handleClose}\r\n                />\r\n            }\r\n            {\r\n                showEditModal && <AddNewOrEvent\r\n                                    newsId={ID}\r\n                                    onSubmit={async (event) => {\r\n                                        event.preventDefault();\r\n                                        const form = event.currentTarget;\r\n                                        const formData = new FormData(form);\r\n                                        await updateNews(formData);\r\n                                        await run();\r\n                                        setShowEditModal(false)\r\n                                    }}\r\n                                    onFieldsChange={onFieldsChange}\r\n                                    fields={fields}\r\n                                    token={token}\r\n                                    header={'Редактирование новости'}\r\n                                    userId={userId}\r\n                                    show={handleShowEditModal}\r\n                                    handleClose={handleCloseEditModal}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default New;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\NewsList.tsx",["208","209"],"import React, {useCallback, useState} from 'react';\r\nimport New from \"./New\";\r\nimport {Col, Container, Form} from \"react-bootstrap\";\r\nimport { useAsync } from \"@umijs/hooks\";\r\nimport {addNewInitialModel, UserTypes} from \"../Constants\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCookieByName} from \"../Auth/Login\";\r\nimport {SelectButton} from \"../Events/EventsPosts\";\r\nimport {ClockLoader} from \"react-spinners\";\r\nimport AddNewOrEvent from \"../AddNewOrEvent\";\r\nimport {addNew, getNews} from \"../Requests\";\r\n\r\nexport interface NewI {\r\n    ID: string\r\n    run?: any\r\n    NAME: string\r\n    PREVIEW_PICTURE: string\r\n    PREVIEW_TEXT: string\r\n    userId: string\r\n    token?: string\r\n    LAST_NAME?: string\r\n    LAST_AUTH?: boolean\r\n}\r\n\r\nexport interface NewsListI {\r\n    count_news_all: string\r\n    this_page: number\r\n    values: Array<NewI>\r\n}\r\n\r\n\r\nconst NewsList = () => {\r\n    const { userId } : UserTypes = useParams();\r\n    const token = getCookieByName('access_token');\r\n    const isAdmin = getCookieByName('is_admin') === \"1\";\r\n\r\n    const { data, loading, run } = useAsync<NewsListI>(() => getNews(userId, token) , []);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [fields, setFields] = useState(addNewInitialModel);\r\n\r\n    const onFieldsChange = useCallback((value, name) => {\r\n        setFields(fields.map(el => el.name === name ? {...el, value: value} : {...el}))\r\n    },[fields]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setShowModal(false)\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(async (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        const formData = new FormData(form);\r\n        await addNew(formData);\r\n        await run();\r\n        setShowModal(false)\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor: '#ebedf0', height: \"100%\", width: \"100%\",  overflow: \"auto\"}}>\r\n            <Container style={{display: 'flex', padding: 0, justifyContent: 'center', paddingBottom: 80}}>\r\n                <Col xl={12} xs={12}>\r\n                    {\r\n                        isAdmin && <SelectButton style={{ margin: '12px auto',width: 250, color: '#fff' }} onClick={() => {\r\n                            setShowModal(true)\r\n                        }}>\r\n                            Добавить новость\r\n                        </SelectButton>\r\n                    }\r\n                    {\r\n                        data?.values?.length === 0 && <div style={{height: 350, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <div style={{display: 'flex', justifyContent: 'center', fontSize: 20, color: '#000', background: '#fff', width: '100%', height: 120, borderRadius: 10, alignItems: 'center' }}>\r\n                                Новостей нет\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        loading && <div style={{height: 350, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <ClockLoader color={'#283593'} loading={loading} />\r\n                        </div>\r\n                    }\r\n                    {\r\n                    !loading && data?.values?.map((el) => <New\r\n                                                              run={run}\r\n                                                              NAME={el.NAME}\r\n                                                              ID={el.ID}\r\n                                                              userId={userId}\r\n                                                              token={token}\r\n                                                              PREVIEW_PICTURE={el.PREVIEW_PICTURE}\r\n                                                              PREVIEW_TEXT={el.PREVIEW_TEXT}/> )\r\n                    }\r\n                </Col>\r\n            </Container>\r\n            {\r\n                showModal && <AddNewOrEvent onSubmit={onSubmit}\r\n                                            onFieldsChange={onFieldsChange}\r\n                                            fields={fields}\r\n                                            token={token}\r\n                                            header={'Добавление новости'}\r\n                                            userId={userId}\r\n                                            show={showModal}\r\n                                            handleClose={handleClose}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewsList;\r\n","C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\News\\DetailNewModal.tsx",[],"C:\\Users\\в\\Desktop\\OpenServer\\domains\\diplom\\FrontEnd\\src\\main\\Constants.ts",[],{"ruleId":"210","severity":1,"message":"211","line":8,"column":9,"nodeType":"212","messageId":"213","endLine":8,"endColumn":18},{"ruleId":"214","severity":1,"message":"215","line":1,"column":8,"nodeType":"212","messageId":"213","endLine":1,"endColumn":13},{"ruleId":"216","severity":1,"message":"217","line":20,"column":8,"nodeType":"212","endLine":20,"endColumn":12},{"ruleId":"216","severity":1,"message":"218","line":20,"column":8,"nodeType":"212","endLine":20,"endColumn":12,"suggestions":"219"},{"ruleId":"210","severity":1,"message":"220","line":1,"column":16,"nodeType":"212","messageId":"213","endLine":1,"endColumn":27},{"ruleId":"210","severity":1,"message":"221","line":3,"column":25,"nodeType":"212","messageId":"213","endLine":3,"endColumn":29},{"ruleId":"216","severity":1,"message":"222","line":56,"column":8,"nodeType":"223","endLine":56,"endColumn":10,"suggestions":"224"},{"ruleId":"214","severity":1,"message":"225","line":1,"column":29,"nodeType":"212","messageId":"213","endLine":1,"endColumn":38},{"ruleId":"216","severity":1,"message":"226","line":52,"column":8,"nodeType":"223","endLine":52,"endColumn":44,"suggestions":"227"},{"ruleId":"214","severity":1,"message":"228","line":58,"column":19,"nodeType":"212","messageId":"213","endLine":58,"endColumn":26},{"ruleId":"216","severity":1,"message":"222","line":75,"column":8,"nodeType":"223","endLine":75,"endColumn":10,"suggestions":"229"},{"ruleId":"210","severity":1,"message":"228","line":25,"column":19,"nodeType":"212","messageId":"213","endLine":25,"endColumn":26},{"ruleId":"210","severity":1,"message":"230","line":25,"column":28,"nodeType":"212","messageId":"213","endLine":25,"endColumn":31},{"ruleId":"216","severity":1,"message":"231","line":40,"column":8,"nodeType":"223","endLine":40,"endColumn":14,"suggestions":"232"},{"ruleId":"210","severity":1,"message":"233","line":46,"column":15,"nodeType":"212","messageId":"213","endLine":46,"endColumn":21},{"ruleId":"210","severity":1,"message":"234","line":2,"column":9,"nodeType":"212","messageId":"213","endLine":2,"endColumn":38},{"ruleId":"210","severity":1,"message":"235","line":4,"column":23,"nodeType":"212","messageId":"213","endLine":4,"endColumn":35},{"ruleId":"210","severity":1,"message":"236","line":17,"column":11,"nodeType":"212","messageId":"213","endLine":17,"endColumn":18},{"ruleId":"210","severity":1,"message":"237","line":2,"column":25,"nodeType":"212","messageId":"213","endLine":2,"endColumn":30},{"ruleId":"210","severity":1,"message":"238","line":10,"column":8,"nodeType":"212","messageId":"213","endLine":10,"endColumn":22},{"ruleId":"210","severity":1,"message":"228","line":21,"column":19,"nodeType":"212","messageId":"213","endLine":21,"endColumn":26},{"ruleId":"210","severity":1,"message":"230","line":21,"column":28,"nodeType":"212","messageId":"213","endLine":21,"endColumn":31},{"ruleId":"216","severity":1,"message":"239","line":22,"column":116,"nodeType":"223","endLine":22,"endColumn":122,"suggestions":"240"},{"ruleId":"210","severity":1,"message":"241","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":19},{"ruleId":"210","severity":1,"message":"242","line":11,"column":13,"nodeType":"212","messageId":"213","endLine":11,"endColumn":19},{"ruleId":"210","severity":1,"message":"243","line":12,"column":11,"nodeType":"212","messageId":"213","endLine":12,"endColumn":16},{"ruleId":"210","severity":1,"message":"225","line":1,"column":16,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"210","severity":1,"message":"244","line":6,"column":9,"nodeType":"212","messageId":"213","endLine":6,"endColumn":17},{"ruleId":"210","severity":1,"message":"245","line":7,"column":9,"nodeType":"212","messageId":"213","endLine":7,"endColumn":24},{"ruleId":"216","severity":1,"message":"246","line":31,"column":8,"nodeType":"223","endLine":31,"endColumn":20,"suggestions":"247"},{"ruleId":"210","severity":1,"message":"248","line":3,"column":15,"nodeType":"212","messageId":"213","endLine":3,"endColumn":24},{"ruleId":"210","severity":1,"message":"249","line":4,"column":9,"nodeType":"212","messageId":"213","endLine":4,"endColumn":18},{"ruleId":"210","severity":1,"message":"250","line":2,"column":9,"nodeType":"212","messageId":"213","endLine":2,"endColumn":15},{"ruleId":"210","severity":1,"message":"251","line":6,"column":10,"nodeType":"212","messageId":"213","endLine":6,"endColumn":18},{"ruleId":"210","severity":1,"message":"211","line":8,"column":9,"nodeType":"212","messageId":"213","endLine":8,"endColumn":18},{"ruleId":"210","severity":1,"message":"220","line":1,"column":16,"nodeType":"212","messageId":"213","endLine":1,"endColumn":27},{"ruleId":"210","severity":1,"message":"252","line":2,"column":9,"nodeType":"212","messageId":"213","endLine":2,"endColumn":12},{"ruleId":"210","severity":1,"message":"220","line":1,"column":16,"nodeType":"212","messageId":"213","endLine":1,"endColumn":27},{"ruleId":"210","severity":1,"message":"253","line":1,"column":29,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"237","line":2,"column":25,"nodeType":"212","messageId":"213","endLine":2,"endColumn":30},{"ruleId":"210","severity":1,"message":"228","line":23,"column":19,"nodeType":"212","messageId":"213","endLine":23,"endColumn":26},{"ruleId":"210","severity":1,"message":"230","line":23,"column":28,"nodeType":"212","messageId":"213","endLine":23,"endColumn":31},{"ruleId":"216","severity":1,"message":"239","line":24,"column":116,"nodeType":"223","endLine":24,"endColumn":122,"suggestions":"254"},{"ruleId":"210","severity":1,"message":"234","line":2,"column":9,"nodeType":"212","messageId":"213","endLine":2,"endColumn":38},{"ruleId":"210","severity":1,"message":"235","line":4,"column":23,"nodeType":"212","messageId":"213","endLine":4,"endColumn":35},{"ruleId":"255","severity":1,"message":"256","line":56,"column":39,"nodeType":"257","messageId":"258","endLine":56,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":56,"column":54,"nodeType":"257","messageId":"258","endLine":56,"endColumn":56},{"ruleId":"214","severity":1,"message":"215","line":1,"column":8,"nodeType":"212","messageId":"213","endLine":1,"endColumn":13},{"ruleId":"216","severity":1,"message":"217","line":20,"column":8,"nodeType":"212","endLine":20,"endColumn":12},{"ruleId":"216","severity":1,"message":"218","line":20,"column":8,"nodeType":"212","endLine":20,"endColumn":12,"suggestions":"259"},{"ruleId":"210","severity":1,"message":"260","line":9,"column":10,"nodeType":"212","messageId":"213","endLine":9,"endColumn":15},{"ruleId":"210","severity":1,"message":"236","line":24,"column":11,"nodeType":"212","messageId":"213","endLine":24,"endColumn":18},{"ruleId":"210","severity":1,"message":"228","line":28,"column":19,"nodeType":"212","messageId":"213","endLine":28,"endColumn":26},{"ruleId":"210","severity":1,"message":"230","line":28,"column":28,"nodeType":"212","messageId":"213","endLine":28,"endColumn":31},{"ruleId":"216","severity":1,"message":"231","line":44,"column":8,"nodeType":"223","endLine":44,"endColumn":14,"suggestions":"261"},{"ruleId":"210","severity":1,"message":"233","line":50,"column":15,"nodeType":"212","messageId":"213","endLine":50,"endColumn":21},{"ruleId":"210","severity":1,"message":"228","line":13,"column":19,"nodeType":"212","messageId":"213","endLine":13,"endColumn":26},{"ruleId":"210","severity":1,"message":"221","line":3,"column":25,"nodeType":"212","messageId":"213","endLine":3,"endColumn":29},{"ruleId":"216","severity":1,"message":"222","line":57,"column":8,"nodeType":"223","endLine":57,"endColumn":10,"suggestions":"262"},"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","no-unused-vars","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: 'fn' and 'fnExit'. Either include them or remove the dependency array. If 'fn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["263"],"'useCallback' is defined but never used.","'Form' is defined but never used.","React Hook useCallback has a missing dependency: 'run'. Either include it or remove the dependency array.","ArrayExpression",["264"],"'useEffect' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'activeDateTab'. Either exclude it or remove the dependency array.",["265"],"'loading' is assigned a value but never used.",["266"],"'run' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'profileFields'. Either include it or remove the dependency array. You can also do a functional update 'setProfileFields(p => ...)' if you only need 'profileFields' in the 'setProfileFields' call.",["267"],"'result' is assigned a value but never used.","'mainProfileContainerInterface' is defined but never used.","'SelectButton' is defined but never used.","'isAdmin' is assigned a value but never used.","'Modal' is defined but never used.","'ModalContainer' is defined but never used.","React Hook useMemo has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["268"],"'EditProfile' is defined but never used.","'userId' is assigned a value but never used.","'token' is assigned a value but never used.","'useAsync' is defined but never used.","'getCookieByName' is defined but never used.","React Hook useMemo has a missing dependency: 'userId'. Either include it or remove the dependency array.",["269"],"'useParams' is defined but never used.","'UserTypes' is defined but never used.","'Button' is defined but never used.","'userInfo' is defined but never used.","'Col' is defined but never used.","'useMemo' is defined but never used.",["270"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["271"],"'debug' is defined but never used.",["272"],["273"],{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"276","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"283","fix":"287"},{"desc":"274","fix":"288"},{"desc":"281","fix":"289"},{"desc":"276","fix":"290"},"Update the dependencies array to be: [fn, fnExit]",{"range":"291","text":"292"},"Update the dependencies array to be: [run]",{"range":"293","text":"294"},"Update the dependencies array to be: [currentDateInterval]",{"range":"295","text":"296"},{"range":"297","text":"294"},"Update the dependencies array to be: [data, profileFields]",{"range":"298","text":"299"},"Update the dependencies array to be: [show, userInfo]",{"range":"300","text":"301"},"Update the dependencies array to be: [currentTab, userId]",{"range":"302","text":"303"},{"range":"304","text":"301"},{"range":"305","text":"292"},{"range":"306","text":"299"},{"range":"307","text":"294"},[645,649],"[fn, fnExit]",[1769,1771],"[run]",[1812,1848],"[currentDateInterval]",[2835,2837],[1500,1506],"[data, profileFields]",[982,988],"[show, userInfo]",[1051,1063],"[currentTab, userId]",[1109,1115],[645,649],[1659,1665],[1784,1786]]